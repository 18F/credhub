buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.owasp:dependency-check-gradle:1.3.6")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'

jar {
    baseName = 'sec-eng-credential-manager'
    version = '0.1.0'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
checkstyle.toolVersion = '6.17'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    integrationTest {
        java {
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-hateoas')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework.boot:spring-boot-actuator')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.passay:passay:1.1.0')
    compile('com.h2database:h2')
    compile('com.jayway.jsonpath:json-path:2.2.0')
    compile('org.bouncycastle:bcpkix-jdk15on:1.52')
    compile group: 'com.google.guava', name: 'guava', version: '19.0'
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.skyscreamer:jsonassert')
    testCompile('com.greghaskins:spectrum:0.6.1')
    testCompile('org.apache.commons:commons-lang3:3.4')
}


eclipse {
    classpath {
        containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
        containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        "build.version": jar.version,
        "build.number": System.getenv("BUILD_NUMBER") ?: "DEV"
    ]
    outputs.upToDateWhen { false }
}

jacoco {
    toolVersion = "0.7.6.201602180812"
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/reports/jacoco"
    }
}

bootRun {
    addResources = true
}

test {
    jacoco {
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled false
        html.enabled true
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

tasks.check.dependsOn tasks.jacocoTestReport
tasks.check.dependsOn tasks.dependencyCheck
tasks.check.dependsOn tasks.integrationTest
tasks.integrationTest.dependsOn tasks.assemble
tasks.integrationTest.mustRunAfter tasks.test
